// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: boards.sql

package db

import (
	"context"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (name, owner)
VALUES ($1, $2)
RETURNING id, name, owner
`

type CreateBoardParams struct {
	Name  string
	Owner string
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (Board, error) {
	row := q.db.QueryRow(ctx, createBoard, arg.Name, arg.Owner)
	var i Board
	err := row.Scan(&i.ID, &i.Name, &i.Owner)
	return i, err
}

const deleteBoard = `-- name: DeleteBoard :exec
DELETE FROM boards
WHERE id = $1
`

func (q *Queries) DeleteBoard(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBoard, id)
	return err
}

const getBoard = `-- name: GetBoard :one
SELECT id, name, owner
FROM boards
WHERE id = $1
`

func (q *Queries) GetBoard(ctx context.Context, id int32) (Board, error) {
	row := q.db.QueryRow(ctx, getBoard, id)
	var i Board
	err := row.Scan(&i.ID, &i.Name, &i.Owner)
	return i, err
}

const listBoardsByOwner = `-- name: ListBoardsByOwner :many
SELECT id, name, owner
FROM boards
WHERE owner = $1
ORDER BY id
`

func (q *Queries) ListBoardsByOwner(ctx context.Context, owner string) ([]Board, error) {
	rows, err := q.db.Query(ctx, listBoardsByOwner, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(&i.ID, &i.Name, &i.Owner); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBoardName = `-- name: UpdateBoardName :one
UPDATE boards
SET name = $2
WHERE id = $1
RETURNING id, name, owner
`

type UpdateBoardNameParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateBoardName(ctx context.Context, arg UpdateBoardNameParams) (Board, error) {
	row := q.db.QueryRow(ctx, updateBoardName, arg.ID, arg.Name)
	var i Board
	err := row.Scan(&i.ID, &i.Name, &i.Owner)
	return i, err
}
