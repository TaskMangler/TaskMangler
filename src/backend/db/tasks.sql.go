// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, column_id, position)
VALUES ($1, $2, $3)
RETURNING id, title, column_id, position
`

type CreateTaskParams struct {
	Title    string
	ColumnID int32
	Position int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Title, arg.ColumnID, arg.Position)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ColumnID,
		&i.Position,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTasksByColumnId = `-- name: GetTasksByColumnId :many
SELECT id, title, column_id, position
FROM tasks
WHERE column_id = $1
ORDER BY position
`

func (q *Queries) GetTasksByColumnId(ctx context.Context, columnID int32) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByColumnId, columnID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ColumnID,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET title = $2, position = $3
WHERE id = $1
RETURNING id, title, column_id, position
`

type UpdateTaskParams struct {
	ID       int32
	Title    string
	Position int32
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask, arg.ID, arg.Title, arg.Position)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ColumnID,
		&i.Position,
	)
	return i, err
}
