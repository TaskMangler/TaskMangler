// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: columns.sql

package db

import (
	"context"
)

const createColumn = `-- name: CreateColumn :one
INSERT INTO columns (name, board_id, position)
VALUES ($1, $2, $3)
RETURNING id, name, board_id, position
`

type CreateColumnParams struct {
	Name     string
	BoardID  int32
	Position int32
}

func (q *Queries) CreateColumn(ctx context.Context, arg CreateColumnParams) (Column, error) {
	row := q.db.QueryRow(ctx, createColumn, arg.Name, arg.BoardID, arg.Position)
	var i Column
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BoardID,
		&i.Position,
	)
	return i, err
}

const deleteColumn = `-- name: DeleteColumn :exec
DELETE FROM columns
WHERE id = $1
`

func (q *Queries) DeleteColumn(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteColumn, id)
	return err
}

const getColumnsByBoardId = `-- name: GetColumnsByBoardId :many
SELECT id, name, board_id, position
FROM columns
WHERE board_id = $1
ORDER BY position
`

func (q *Queries) GetColumnsByBoardId(ctx context.Context, boardID int32) ([]Column, error) {
	rows, err := q.db.Query(ctx, getColumnsByBoardId, boardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Column
	for rows.Next() {
		var i Column
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BoardID,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateColumn = `-- name: UpdateColumn :one
UPDATE columns
SET name = $2, position = $3
WHERE id = $1
RETURNING id, name, board_id, position
`

type UpdateColumnParams struct {
	ID       int32
	Name     string
	Position int32
}

func (q *Queries) UpdateColumn(ctx context.Context, arg UpdateColumnParams) (Column, error) {
	row := q.db.QueryRow(ctx, updateColumn, arg.ID, arg.Name, arg.Position)
	var i Column
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BoardID,
		&i.Position,
	)
	return i, err
}
