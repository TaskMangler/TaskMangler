// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, username, identifier)
VALUES ($1, $2, $3)
RETURNING id, username, identifier
`

type CreateSessionParams struct {
	ID         int64
	Username   string
	Identifier string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.ID, arg.Username, arg.Identifier)
	var i Session
	err := row.Scan(&i.ID, &i.Username, &i.Identifier)
	return i, err
}

const deleteSessionByID = `-- name: DeleteSessionByID :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSessionByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSessionByID, id)
	return err
}

const deleteSessionsByUsername = `-- name: DeleteSessionsByUsername :exec
DELETE FROM sessions
WHERE username = $1
`

func (q *Queries) DeleteSessionsByUsername(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteSessionsByUsername, username)
	return err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT id, username, identifier
FROM sessions
WHERE id = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByID, id)
	var i Session
	err := row.Scan(&i.ID, &i.Username, &i.Identifier)
	return i, err
}

const getSessions = `-- name: GetSessions :many
SELECT id, username, identifier
FROM sessions
ORDER BY id
`

func (q *Queries) GetSessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.Query(ctx, getSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(&i.ID, &i.Username, &i.Identifier); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionsByUsername = `-- name: GetSessionsByUsername :many
SELECT id, username, identifier
FROM sessions
WHERE username = $1
ORDER BY id
`

func (q *Queries) GetSessionsByUsername(ctx context.Context, username string) ([]Session, error) {
	rows, err := q.db.Query(ctx, getSessionsByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(&i.ID, &i.Username, &i.Identifier); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
